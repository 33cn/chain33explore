var json_parse = (function () { var at; var ch; var escapee = { '"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" }; var text; var error = function (m) { throw { name: "SyntaxError", message: m, at: at, text: text } }; var next = function (c) { if (c && c !== ch) { error("Expected '" + c + "' instead of '" + ch + "'") } ch = text.charAt(at); at += 1; return ch }; var number = function () { var value; var string = ""; if (ch === "-") { string = "-"; next("-") } while (ch >= "0" && ch <= "9") { string += ch; next() } if (ch === ".") { string += "."; while (next() && ch >= "0" && ch <= "9") { string += ch } } if (ch === "e" || ch === "E") { string += ch; next(); if (ch === "-" || ch === "+") { string += ch; next() } while (ch >= "0" && ch <= "9") { string += ch; next() } } value = string; if (!isFinite(value)) { error("Bad number") } else { return value } }; var string = function () { var hex; var i; var value = ""; var uffff; if (ch === '"') { while (next()) { if (ch === '"') { next(); return value } if (ch === "\\") { next(); if (ch === "u") { uffff = 0; for (i = 0; i < 4; i += 1) { hex = parseInt(next(), 16); if (!isFinite(hex)) { break } uffff = uffff * 16 + hex } value += String.fromCharCode(uffff) } else { if (typeof escapee[ch] === "string") { value += escapee[ch] } else { break } } } else { value += ch } } } error("Bad string") }; var white = function () { while (ch && ch <= " ") { next() } }; var word = function () { switch (ch) { case "t": next("t"); next("r"); next("u"); next("e"); return true; case "f": next("f"); next("a"); next("l"); next("s"); next("e"); return false; case "n": next("n"); next("u"); next("l"); next("l"); return null }error("Unexpected '" + ch + "'") }; var value; var array = function () { var arr = []; if (ch === "[") { next("["); white(); if (ch === "]") { next("]"); return arr } while (ch) { arr.push(value()); white(); if (ch === "]") { next("]"); return arr } next(","); white() } } error("Bad array") }; var object = function () { var key; var obj = {}; if (ch === "{") { next("{"); white(); if (ch === "}") { next("}"); return obj } while (ch) { key = string(); white(); next(":"); if (Object.hasOwnProperty.call(obj, key)) { error("Duplicate key '" + key + "'") } obj[key] = value(); white(); if (ch === "}") { next("}"); return obj } next(","); white() } } error("Bad object") }; value = function () { white(); switch (ch) { case "{": return object(); case "[": return array(); case '"': return string(); case "-": return number(); default: return (ch >= "0" && ch <= "9") ? number() : word() } }; return function (source, reviver) { var result; text = source; at = 0; ch = " "; result = value(); white(); if (ch) { error("Syntax error") } return (typeof reviver === "function") ? (function walk(holder, key) { var k; var v; var val = holder[key]; if (val && typeof val === "object") { for (k in val) { if (Object.prototype.hasOwnProperty.call(val, k)) { v = walk(val, k); if (v !== undefined) { val[k] = v } else { delete val[k] } } } } return reviver.call(holder, key, val) }({ "": result }, "")) : result } }());
export default json_parse